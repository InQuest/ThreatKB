"""Cleanup tags and add unique constraint.

Revision ID: cdf148532fbe
Revises: 69adad32734c
Create Date: 2021-11-08 21:05:34.142634

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import engine
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = 'cdf148532fbe'
down_revision = '69adad32734c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()

    # Query DB and fetch all duplicate tags
    dup_results = connection.execute("SELECT text, count(*) FROM tags GROUP BY text HAVING count(*) > 1")
    dups = dup_results.fetchall()

    for dup in dups:
        tag = dup[0]
        print("")
        print("Duplicate Found: %s" % tag)

        # Get minimum ID for duplicate tag, this will be correct id
        min_results = connection.execute("SELECT min(id) FROM tags WHERE text = '%s'" % tag)
        min = min_results.fetchone()
        min_tag_id = min[0]
        print("Correct ID for '%s' should be: %d" % (tag, min_tag_id))

        # Fetch the IDs for the duplicate tag that aren't the minimum. These will be deleted.
        other_ids_results = connection.execute(
            "SELECT id FROM tags WHERE text = '%s' and id <> '%d'" % (tag, min_tag_id))
        other_ids = other_ids_results.fetchall()
        for other_id in other_ids:
            # Update Tag Mappings using bad ID and start using correct ID
            print("Tag Mappings for Tag ID %d will be updated to use ID %d" % (other_id[0], min_tag_id))
            connection.execute("UPDATE tags_mapping SET tag_id = %d WHERE tag_id = %d" % (min_tag_id, other_id[0]))

            # Check if Previous Update caused new duplicates in Tags Mapping
            tags_mapping_dup_results = connection.execute(
                """SELECT source_table, source_id, tag_id, count(*)
                    FROM tags_mapping
                    GROUP BY source_table, source_id, tag_id
                    HAVING count(*) > 1""")
            tags_mapping_dups = tags_mapping_dup_results.fetchall()
            for tags_mapping_dup in tags_mapping_dups:
                print("")
                print("Duplicate found in Tags Mapping for source_table=%s, source_id=%d, tag_id=%d" % (
                    tags_mapping_dup[0], tags_mapping_dup[1], tags_mapping_dup[2]))

                # Get minimum ID for duplicate tag mapping, this will be correct id
                tags_mapping_min_results = connection.execute(
                    """SELECT min(id)
                        FROM tags_mapping
                        WHERE source_table = '%s' and source_id = %d and tag_id = %d""" % (
                        tags_mapping_dup[0], tags_mapping_dup[1], tags_mapping_dup[2]))
                tags_mapping_min = tags_mapping_min_results.fetchone()
                min_tags_mapping_id = tags_mapping_min[0]
                print("Correct ID for source_table=%s, source_id=%d, tag_id=%d should be: %d" % (
                    tags_mapping_dup[0], tags_mapping_dup[1], tags_mapping_dup[2], min_tags_mapping_id))

                # Delete from Tags Mapping where ID not in minimum for source_table, source_id, tag_id combination
                print("")
                print("Deleting from Tags Mapping where ID <> %d for source_table=%s, source_id=%d, tag_id=%d" % (
                    min_tags_mapping_id, tags_mapping_dup[0], tags_mapping_dup[1], tags_mapping_dup[2]))
                connection.execute(
                    """DELETE
                        FROM tags_mapping
                        WHERE source_table = '%s' and source_id = %d and tag_id = %d and id <> %d""" % (
                        tags_mapping_dup[0], tags_mapping_dup[1], tags_mapping_dup[2], min_tags_mapping_id))

            # Delete duplicates from Tags
            print("")
            print("Deleting duplicates from Tags for '%s' and ID <> %d" % (tag, min_tag_id))
            connection.execute(
                """DELETE
                    FROM tags
                    WHERE text = '%s' and id <> %d""" % (tag, min_tag_id))
            print("")
    op.create_unique_constraint('uq_tag_text', 'tags', ['text'])
    op.create_unique_constraint('uq_tags_mapping', 'tags_mapping', ['source_table', 'source_id', 'tag_id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('uq_tag_text', 'tags', type_='unique')
    op.drop_constraint('uq_tags_mapping', 'tags_mapping', type_='unique')
    # ### end Alembic commands ###
